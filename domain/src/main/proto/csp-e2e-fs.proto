// ## Forward Security Subprotocol

// This protocol specifies forward security for end-to-end encrypted chat server
// messages. It is based on sessions established between two parties, where each
// session has a unique ID and is associated with ephemeral key material
// negotiated between the parties using ECDH key agreement and hash chain based
// key derivation.

// Each party is either an initiator or a responder in a given session. For
// bidirectional communication, two separate sessions are established. This is
// reflected in the envelope message types: one for control and content messages
// sent from the initiator of a session to the responder
// (`FromSessionInitiatorEnvelope`), and another for control messages sent by
// the responder back to the initiator (`FromSessionResponderEnvelope`) to
// enable an ECDH based key exchange.

// Content messages from an initiator to a responder can take any other type that
// could normally be sent without Forward Security, and wrap the message
// contained within using a separate cryptographic layer that provides Forward
// Security.

// ### Terminology

// - `FS`: Forward Security
// - `SI`: Session Initiator
// - `SR`: Session Responder
// - `2DH`: One-sided forward security with two DH calculations in the key
//   derivation
// - `4DH`: Full two-sided forward security with four DH calculations in the key
//   derivation

// # Modes

// An ECDH key negotiation normally needs active calculations by both involved
// parties before any actual messages can be exchanged. This is not practical
// in a messaging app, as the other party may not be online at the time when the
// first message(s) are sent.

// Thus, the protocol specifies two modes, called 2DH and 4DH.

// ## 2DH mode

// 2DH mode can be used immediately, even in a new session, as it does not
// involve any ECDH calculations from the peer (responder). However, it only
// protects against a compromise of the initiator's permanent secret key, not of
// the responder's permanent secret key. It is still better than sending all
// messages without Forward Security until a full two-sided session has been
// negotiated.

// ## 4DH mode

// A session enters 4DH mode once the responder has received and processed the
// initiator's `Init` message, and the resulting `Accept` message has been
// received by the initiator. At this point, ephemeral key material is available
// from the responder and is used in the ECDH calculations. Messages sent from
// this point on are secure even in the event of a future compromise of the
// permanent secret key of either party.

// # Ratchet counters

// Each session is associated with a counter, which describes how many times the
// KDF ratchet has been turned since the initial ECDH based key negotiation.
// Whenever a new message has been sent in session, the counter must be
// incremented and the ratchet must be turned. As a KDF ratchet operation cannot
// be reversed, counter values cannot go back, and the original message order
// must be preserved during transport over the network and during processing on
// both sides.

// To account for lost messages (e.g. when the recipient has been offline for an
// extended period of time), the responder must be prepared to accept counters
// that have skipped a few values, and turn the KDF ratchet as many times as is
// needed to reach the new counter value. To limit the CPU impact on the
// responder side, the permissible counter increment is limited to 10'000.

// ### Usual Protocol Flow

// A forward security session negotiation is typically started when a user sends
// the first message to a peer. The user assumes the role of the session
// initiator, creates a new session and sends an `Init` message, followed by any
// number of encapsulated `Message`s in 2DH mode.

//     SI -- 0xa0 Init -----------> SR   [1]
//     SI -- 0xa0 Message (2DH) --> SR   [0..N]

// At this point, SI established a session in 2DH mode for messages flowing from
// SI to SR.

// The session responder will then eventually process the `Init` and `Accept` the
// session.

//     SR -- 0xa1 Accept ---------> SI

// At that point, the session has been upgraded to 4DH mode for future messages
// sent from SI to SR.

//     SI -- 0xa0 Message (4DH) --> SR   [0..N]

// At any point SI may `Terminate` or replace a session by sending a new `Init`,
// following the above flow.

// In case of an error, the protocol flow will deviate. See the concrete message
// descriptions.

syntax = "proto3";

package csp_e2e_fs;

option java_package = "ch.threema.protobuf.csp.e2e.fs";
option java_multiple_files = true;

message FromSessionInitiatorEnvelope {
  // Forward security session ID, 16 bytes
  bytes session_id = 1;

  // Establish a new FS session. The initiator picks a new random session ID.
  message Init {
    // Ephemeral public key of the initiator for this session
    bytes ephemeral_public_key = 1;
  }

  // Signals that the initiator will not send any further `Message`s in this
  // session. The responder should discard all key material related to this
  // session.
  message Terminate {}

  // Encapsulates another CSP E2EE message, adding forward security.
  message Message {
    // Whether 2DH or 4DH was used in deriving the key for encrypting this
    // message.
    enum DHType {
      TWODH = 0;
      FOURDH = 1;
    }
    DHType dh_type = 1;

    // A monotonically increasing counter, starting at 1 for the first 2DH or
    // 4DH `Message` sent in this session, and incrementing by 1 for each
    // successive `Message`.
    //
    // - Counters for 2DH and 4DH are separate, as they are based on different
    //   root keys.
    // - Can be used by the responder as a hint of how many times to
    //   rotate/ratchet the KDF, in case an intermediate `Message` went missing.
    uint64 counter = 2;

    // A message defined in `e2e.container`, encrypted by the keys negotiated
    // for FS in this session.
    //
    // An inner E2EE message of type `0xa0` or `0xa1` is disallowed and **must** be
    // discarded.
    bytes message = 3;
  }

  oneof content {
    Init init = 2;
    Terminate terminate = 3;
    Message message = 4;
  }
}

message FromSessionResponderEnvelope {
  // Forward security session ID, 16 bytes
  bytes session_id = 1;

  // Accept a newly established session by the initiator. The session ID is
  // equal to the one of the initiator.
  message Accept {
    // Ephemeral public key of the responder for this session
    bytes ephemeral_public_key = 1;
  }

  // Sent when receiving a `FromSessionInitiatorEnvelope.Message` that cannot be
  // decrypted (e.g. because the responder has lost the session information).
  //
  // The initiator should discard the FS session and start a new one.
  message Reject {
    // Message ID of the message that could not be decrypted and that should be
    // sent again in a new session (8 bytes)
    fixed64 rejected_message_id = 1;
  }

  oneof content {
    Accept accept = 2;
    Reject reject = 3;
  }
}
